; Bit-Shift-Decoder
; Paw Petersen, SLAE-656
; https://www.pawpetersen.dk/slae-assignment-4-bit-shift-encoder-linux-x86/

global _start
section .text
_start:
  jmp   short call_decoder
decoder:
  pop   esi                 ; addr of encoded_sc
decode:
  mov   al,byte [esi]       ; al = byte pointed to by addr of esi
  mov   bl,al               ; copy al into bl
  and   al,0x0f             ; we only need the 4 lower bits of al
  and   bl,0xf0             ; we only need the 4 higher bits of bl
  shl   al,0x4              ; shift bits of al 4 places left
  shr   bl,0x4              ; shift bits of bl 4 places right
  or    al,bl               ; merge bits of al + bl into al
  mov   byte [esi], al      ; put the decoded byte back into its place
  inc   esi                 ; increment the pointer
  cmp   byte [esi],0xaa     ; are we at the end marker?
  jne   decode              ; if not, then decode more
  jmp   encoded_sc          ; we decoded everything, jump to shellcode
call_decoder:
  call  decoder
  encoded_sc:   db 0x86,0xa0,0xa0,0xa0,0xa0,0x86,0x27,0xb6,0x37,0x12,\
0x86,0x27,0x02,0x77,0xf6,0x86,0x36,0xf6,0x46,0x56,0x86,0x47,0x02,0x54,\
0xe6,0x86,0x35,0x86,0x96,0x66,0x86,0x24,0x96,0x47,0xd2,0x13,0x9c,0x1b,\
0x91,0x15,0x8b,0x11,0x11,0x15,0x80,0x05,0x13,0x0c,0x05,0x45,0x15,0x98,\
0x6e,0x38,0x6c,0x41,0x30,0x47,0x42,0x01,0xb2,0x43,0x42,0x65,0x98,0x1f,\
0xbe,0xc1,0xbe,0xc0,0x95,0x95,0x2e,0x8e,0x13,0xbd,0x13,0x0c,0x0b,0x10,\
0xdc,0x08,0x13,0x0c,0x0b,0x2a,0xd8,0xc5,0x42,0xc0,0x13,0x9c,0xdc,0x08,\
0xbe,0x6e,0x13,0x2d,0x2b,0x10,0x13,0xbd,0x3b,0x10,0x13,0x0c,0x0b,0x40,\
0xdc,0x08,0xbe,0x4d,0xaa 
